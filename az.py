#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import base64
import importlib.util
import tempfile
import hashlib
import getpass

# 将原始脚本编码为base64
SCRIPT_DATA = """

"""

# 安全验证信息
PASSWORD_HASH = "aa8e4c230111e7d6654e3a9aecd79405e34fa3b23b45ef8624e4ee4bc2a0cefe"
SALT = "8a7b6c5d4e3f"

def secure_hash(password, salt):
    """验证密码的哈希函数"""
    return hashlib.sha256((password + salt).encode()).hexdigest()

def verify_password():
    """验证用户输入的密码"""
    for attempt in range(3):  # 允许3次尝试
        try:
            password = getpass.getpass("请输入密码: ")
            if secure_hash(password, SALT) == PASSWORD_HASH:
                return True
            else:
                print(f"密码错误，还有 {2 - attempt} 次尝试机会")
        except KeyboardInterrupt:
            print("\n操作已取消")
            sys.exit(1)
            
    print("密码验证失败，退出程序")
    return False

def run_script():
    """验证密码，解码并运行脚本"""
    try:
        # 先验证密码
        if not verify_password():
            sys.exit(1)
            
        print("密码验证成功，正在启动程序...")
            
        # Base64解码
        script_code = base64.b64decode(SCRIPT_DATA)
        
        # 创建临时文件
        fd, temp_path = tempfile.mkstemp(suffix='.py')
        os.close(fd)
        
        # 写入解码后的脚本
        with open(temp_path, 'wb') as f:
            f.write(script_code)
        
        # 导入并运行脚本
        spec = importlib.util.spec_from_file_location("temp_module", temp_path)
        module = importlib.util.module_from_spec(spec)
        sys.modules["temp_module"] = module
        spec.loader.exec_module(module)
        
        # 清理临时文件
        try:
            os.unlink(temp_path)
        except:
            pass
            
    except Exception as e:
        print(f"运行脚本时出错: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    run_script()
